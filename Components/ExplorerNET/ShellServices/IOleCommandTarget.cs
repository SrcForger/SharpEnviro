using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.InteropServices;

namespace Explorer.ShellServices
{
	/// <summary>
	/// Enables objects and their containers to dispatch commands to each other.
	/// For example, an object's toolbars may contain buttons for commands such as Print, Print Preview, Save, New, and Zoom.
	/// </summary>
	[ComImport]
	[Guid("B722BCCB-4E68-101B-A2BC-00AA00404770")]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	public interface IOleCommandTarget
	{
		/// <summary>
		/// Queries the object for the status of one or more commands generated by user interface events.
		/// </summary>
		/// <param name="pguidCmdGroup">
		/// The unique identifier of the command group; can be NULL to specify the standard group.
		/// All the commands that are passed in the prgCmds  array must belong to the group specified by pguidCmdGroup.
		/// </param>
		/// <param name="cCmds">The number of commands in the prgCmds array.</param>
		/// <param name="prgCmds">
		/// A caller-allocated array of OLECMD  structures that indicate the commands for which the caller needs status information.
		/// This method fills the cmdf member of each structure with values taken from the OLECMDF  enumeration.
		/// </param>
		/// <param name="pCmdText">
		/// A pointer to an OLECMDTEXT  structure in which to return name and/or status information of a single command.
		/// This parameter can be NULL to indicate that the caller does not need this information.
		/// </param>
		/// <returns>This method returns S_OK on success.</returns>
		int QueryStatus([In, MarshalAs(UnmanagedType.Struct)] ref Guid pguidCmdGroup, [MarshalAs(UnmanagedType.U4)] int cCmds, IntPtr prgCmds, IntPtr pCmdText);

		/// <summary>
		/// Executes the specified command or displays help for the command.
		/// </summary>
		/// <param name="pguidCmdGroup">The unique identifier of the command group; can be NULL to specify the standard group.</param>
		/// <param name="nCmdID">The command to be executed. This command must belong to the group specified with pguidCmdGroup.</param>
		/// <param name="nCmdExecOpt">Specifies how the object should execute the command. Possible values are taken from the OLECMDEXECOPT  and OLECMDID_WINDOWSTATE_FLAG  enumerations.</param>
		/// <param name="pvaIn">A pointer to a VARIANTARG  structure containing input arguments. This parameter can be NULL.</param>
		/// <param name="pvaOut">Pointer to a VARIANTARG structure to receive command output. This parameter can be NULL.</param>
		/// <returns></returns>
		int Exec(ref Guid pguidCmdGroup, int nCmdID, int nCmdExecOpt, ref object pvaIn, ref object pvaOut);
	}
}
